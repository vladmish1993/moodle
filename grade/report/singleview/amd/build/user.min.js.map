{"version":3,"file":"user.min.js","sources":["../src/user.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A small modal to search users within the gradebook.\n *\n * @module    gradereport_singleview/user\n * @copyright 2022 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Pending from 'core/pending';\nimport * as Templates from 'core/templates';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport * as Repository from 'core_grades/searchwidget/repository';\nimport * as WidgetBase from 'core_grades/searchwidget/basewidget';\nimport {get_string as getString} from 'core/str';\nimport Url from 'core/url';\n\n/**\n * Our entry point into starting to build the search widget.\n * It'll eventually, based upon the listeners, open the search widget and allow filtering.\n *\n * @method init\n */\nexport const init = () => {\n    const pendingPromise = new Pending();\n    registerListenerEvents();\n    pendingPromise.resolve();\n};\n\n/**\n * Register user search widget related event listeners.\n *\n * @method registerListenerEvents\n */\nconst registerListenerEvents = () => {\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n    CustomEvents.define(document, events);\n\n    let {bodyPromiseResolver, bodyPromise} = WidgetBase.promisesAndResolvers();\n\n    // Register events.\n    events.forEach((event) => {\n        document.addEventListener(event, async(e) => {\n            const trigger = e.target.closest('.userwidget');\n            if (trigger) {\n                const courseID = trigger.dataset.courseid;\n                const groupId = trigger.dataset.groupid;\n                e.preventDefault();\n\n                const actionBaseUrl = Url.relativeUrl('/grade/report/singleview/index.php', {item: 'user'}, false);\n                // If an error occurs while fetching the data, display the error within the modal.\n                const data = await Repository.userFetch(courseID, actionBaseUrl, groupId).catch(async(e) => {\n                    const errorTemplateData = {\n                        'errormessage': e.message\n                    };\n                    bodyPromiseResolver(\n                        await Templates.render('core_grades/searchwidget/error', errorTemplateData)\n                    );\n                });\n                // Early return if there is no module data.\n                if (data === []) {\n                    return;\n                }\n                WidgetBase.init(\n                    bodyPromise,\n                    data.users,\n                    searchUsers(),\n                    getString('selectauser', 'grades')\n                );\n            }\n        });\n    });\n    // Resolvers for passed functions in the modal creation.\n    bodyPromiseResolver(Templates.render(\n        'core_grades/searchwidget/user/usersearch_body',\n        []\n    ));\n};\n\n/**\n * Define how we want to search and filter users when the user decides to input a search value.\n *\n * @method registerListenerEvents\n * @returns {function(): function(*, *): (*)}\n */\nconst searchUsers = () => {\n    return () => {\n        return (users, searchTerm) => {\n            if (searchTerm === '') {\n                return users;\n            }\n            searchTerm = searchTerm.toLowerCase();\n            const searchResults = [];\n            users.forEach((user) => {\n                const userName = user.fullname.toLowerCase();\n                if (userName.includes(searchTerm)) {\n                    searchResults.push(user);\n                }\n            });\n            return searchResults;\n        };\n    };\n};\n"],"names":["pendingPromise","Pending","registerListenerEvents","resolve","events","CustomEvents","activate","keyboardActivate","define","document","bodyPromiseResolver","bodyPromise","WidgetBase","promisesAndResolvers","forEach","event","addEventListener","async","trigger","e","target","closest","courseID","dataset","courseid","groupId","groupid","preventDefault","actionBaseUrl","Url","relativeUrl","item","data","Repository","userFetch","catch","errorTemplateData","message","Templates","render","init","users","searchUsers","searchTerm","toLowerCase","searchResults","user","fullname","includes","push"],"mappings":";;;;;;;qYAqCoB,WACVA,eAAiB,IAAIC,iBAC3BC,yBACAF,eAAeG,iBAQbD,uBAAyB,WACrBE,OAAS,CACX,QACAC,mCAAaD,OAAOE,SACpBD,mCAAaD,OAAOG,qDAEXC,OAAOC,SAAUL,YAE1BM,oBAACA,oBAADC,YAAsBA,aAAeC,WAAWC,uBAGpDT,OAAOU,SAASC,QACZN,SAASO,iBAAiBD,OAAOE,MAAAA,UACvBC,QAAUC,EAAEC,OAAOC,QAAQ,kBAC7BH,QAAS,OACHI,SAAWJ,QAAQK,QAAQC,SAC3BC,QAAUP,QAAQK,QAAQG,QAChCP,EAAEQ,uBAEIC,cAAgBC,aAAIC,YAAY,qCAAsC,CAACC,KAAM,SAAS,GAEtFC,WAAaC,WAAWC,UAAUZ,SAAUM,cAAeH,SAASU,OAAMlB,MAAAA,UACtEmB,kBAAoB,cACNjB,EAAEkB,SAEtB3B,0BACU4B,UAAUC,OAAO,iCAAkCH,0BAI7DJ,OAAS,UAGbpB,WAAW4B,KACP7B,YACAqB,KAAKS,MACLC,eACA,mBAAU,cAAe,kBAMzChC,oBAAoB4B,UAAUC,OAC1B,gDACA,MAUFG,YAAc,IACT,IACI,CAACD,MAAOE,iBACQ,KAAfA,kBACOF,MAEXE,WAAaA,WAAWC,oBAClBC,cAAgB,UACtBJ,MAAM3B,SAASgC,OACMA,KAAKC,SAASH,cAClBI,SAASL,aAClBE,cAAcI,KAAKH,SAGpBD"}