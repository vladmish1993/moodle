{"version":3,"file":"aria-combobox.min.js","sources":["../../../src/local/aria/aria-combobox.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {end, arrowLeft, arrowRight, arrowUp, arrowDown, home, enter, space} from 'core/key_codes';\n\n/**\n * ARIA helpers related to the combobox role.\n *\n * @module     core/local/aria/aria-combobox.\n * @copyright  2022 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Our entry point into adding accessibility handling for comboboxes.\n *\n * @param {Element} comboInput The combobox area to add aria handling to.\n */\nexport const comboBox = (comboInput) => {\n    registerEventListeners(comboInput);\n};\n\n/**\n * Event management of the provided combobox.\n *\n * @param {Element} comboInput The combobox area to add aria handling to.\n */\nconst registerEventListeners = (comboInput) => {\n    document.addEventListener('keydown', (e) => {\n        if (e.target === comboInput) {\n            let next = null;\n            const comboResultArea = document.querySelector('[data-region=\"search-result-items-container\"]');\n            const resultRows = Array.from(comboResultArea.querySelectorAll('[role=\"row\"]'));\n            const resultCells = Array.from(comboResultArea.querySelectorAll('[role=\"gridcell\"]'));\n            const activeResultRow = comboResultArea.querySelector('.active[role=\"row\"]');\n            const activeResultCell = comboResultArea.querySelector('.focused-cell[role=\"gridcell\"]');\n            switch (e.keyCode) {\n                case arrowUp: {\n                    // TODO: Handle the wrapping.\n                    if (activeResultRow === null) {\n                        next = setFirstActiveRow(next, resultRows, comboInput, resultRows.length - 1);\n                    } else {\n                        for (let i = 0; i < resultRows.length; i++) {\n                            if (resultRows[i].id === activeResultRow.id) {\n                                next = resultRows[i - 1];\n                                break;\n                            }\n                        }\n                    }\n                    break;\n                }\n                case arrowDown: {\n                    if (activeResultRow === null) {\n                        next = setFirstActiveRow(next, resultRows, comboInput, 0);\n                    } else {\n                        for (let i = 0; i < resultRows.length - 1; i++) {\n                            if (resultRows[i].id === activeResultRow.id) {\n                                next = resultRows[i + 1];\n                                break;\n                            }\n                        }\n                    }\n                    break;\n                }\n                case home: {\n                    next = resultRows[0];\n                    break;\n                }\n                case end: {\n                    next = resultRows[resultRows.length - 1];\n                    break;\n                }\n                case enter || space: {\n                    // Redirect the user to the appropriate link.\n                    // TODO: Space does not work, special handler on the cell itself?\n                    window.location = activeResultCell.href;\n                    break;\n                }\n                case arrowLeft: {\n                    if (activeResultRow === null) {\n                        next = setFirstActiveRow(next, resultRows, comboInput, 0);\n                    } else {\n                        for (let i = 0; i < resultCells.length; i++) {\n                            if (resultCells[i].id === activeResultCell.id) {\n                                if (resultCells[i - 1] === undefined) {\n                                    resultCells[i].classList.remove('focused-cell');\n                                    resultCells[resultCells.length - 1].classList.add('focused-cell');\n                                    break;\n                                } else {\n                                    resultCells[i].classList.remove('focused-cell');\n                                    resultCells[i - 1].classList.add('focused-cell');\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n                case arrowRight: {\n                    if (activeResultRow === null) {\n                        next = setFirstActiveRow(next, resultRows, comboInput, 0);\n                    } else {\n                        for (let i = 0; i < resultCells.length - 1; i++) {\n                            if (resultCells[i].id === activeResultCell.id) {\n                                resultCells[i].classList.remove('focused-cell');\n                                resultCells[i + 1].classList.add('focused-cell');\n                                break;\n                            }\n                            if (resultCells[i + 2] === undefined) {\n                                resultCells[i + 1].classList.remove('focused-cell');\n                                resultCells[0].classList.add('focused-cell');\n                                break;\n                            }\n                        }\n                    }\n                    break;\n                }\n                default: {\n                    window.console.log('nothing to see here!');\n                    break;\n                }\n            }\n            // Variable next is set if we do want to act on the keypress.\n            nextHandler(next, e, activeResultRow, comboInput);\n        }\n    });\n};\n\n/**\n * With search, we can't automatically set aria elements in the results field, so we do it here.\n *\n * @param {Element} next\n * @param {Array} resultRows\n * @param {Element} comboInput\n * @param {Number} val\n * @returns {Element}\n */\nconst setFirstActiveRow = (next, resultRows, comboInput, val) => {\n    // Set first option as active.\n    next = resultRows[val];\n    next.setAttribute('aria-selected', 'true');\n    next.classList.add('active');\n    comboInput.setAttribute('aria-activedescendant', next.id);\n    next.querySelector('.result-cell').classList.add('focused-cell');\n    return next;\n};\n\n/**\n * Given we have a value to next set active, handle some of the basic handling.\n *\n * @param {Element} next\n * @param {Event} e\n * @param {Element} activeResultRow\n * @param {Element} comboInput\n */\nconst nextHandler = (next, e, activeResultRow, comboInput) => {\n    if (next) {\n        e.preventDefault();\n        if (activeResultRow !== null) {\n            activeResultRow.classList.remove('active');\n            activeResultRow.querySelector('.result-cell').classList.remove('focused-cell');\n        }\n        next.classList.add('active');\n        // Find whatever the first result cell is to add the class.\n        next.querySelector('.result-cell').classList.add('focused-cell');\n        comboInput.setAttribute('aria-activedescendant', next.id);\n    }\n};\n"],"names":["comboInput","registerEventListeners","document","addEventListener","e","target","next","comboResultArea","querySelector","resultRows","Array","from","querySelectorAll","resultCells","activeResultRow","activeResultCell","keyCode","arrowUp","setFirstActiveRow","length","i","id","arrowDown","home","end","enter","space","window","location","href","arrowLeft","undefined","classList","remove","add","arrowRight","console","log","nextHandler","val","setAttribute","preventDefault"],"mappings":"sMA8ByBA,aACrBC,uBAAuBD,mBAQrBC,uBAA0BD,aAC5BE,SAASC,iBAAiB,WAAYC,OAC9BA,EAAEC,SAAWL,WAAY,KACrBM,KAAO,WACLC,gBAAkBL,SAASM,cAAc,iDACzCC,WAAaC,MAAMC,KAAKJ,gBAAgBK,iBAAiB,iBACzDC,YAAcH,MAAMC,KAAKJ,gBAAgBK,iBAAiB,sBAC1DE,gBAAkBP,gBAAgBC,cAAc,uBAChDO,iBAAmBR,gBAAgBC,cAAc,yCAC/CJ,EAAEY,cACDC,sBAEuB,OAApBH,gBACAR,KAAOY,kBAAkBZ,KAAMG,WAAYT,WAAYS,WAAWU,OAAS,YAEtE,IAAIC,EAAI,EAAGA,EAAIX,WAAWU,OAAQC,OAC/BX,WAAWW,GAAGC,KAAOP,gBAAgBO,GAAI,CACzCf,KAAOG,WAAWW,EAAI,oBAOjCE,wBACuB,OAApBR,gBACAR,KAAOY,kBAAkBZ,KAAMG,WAAYT,WAAY,YAElD,IAAIoB,EAAI,EAAGA,EAAIX,WAAWU,OAAS,EAAGC,OACnCX,WAAWW,GAAGC,KAAOP,gBAAgBO,GAAI,CACzCf,KAAOG,WAAWW,EAAI,oBAOjCG,gBACDjB,KAAOG,WAAW,cAGjBe,eACDlB,KAAOG,WAAWA,WAAWU,OAAS,cAGrCM,kBAASC,iBAGVC,OAAOC,SAAWb,iBAAiBc,gBAGlCC,wBACuB,OAApBhB,gBACAR,KAAOY,kBAAkBZ,KAAMG,WAAYT,WAAY,YAElD,IAAIoB,EAAI,EAAGA,EAAIP,YAAYM,OAAQC,OAChCP,YAAYO,GAAGC,KAAON,iBAAiBM,GAAI,SAChBU,IAAvBlB,YAAYO,EAAI,GAAkB,CAClCP,YAAYO,GAAGY,UAAUC,OAAO,gBAChCpB,YAAYA,YAAYM,OAAS,GAAGa,UAAUE,IAAI,sBAGlDrB,YAAYO,GAAGY,UAAUC,OAAO,gBAChCpB,YAAYO,EAAI,GAAGY,UAAUE,IAAI,iCAQhDC,yBACuB,OAApBrB,gBACAR,KAAOY,kBAAkBZ,KAAMG,WAAYT,WAAY,YAElD,IAAIoB,EAAI,EAAGA,EAAIP,YAAYM,OAAS,EAAGC,IAAK,IACzCP,YAAYO,GAAGC,KAAON,iBAAiBM,GAAI,CAC3CR,YAAYO,GAAGY,UAAUC,OAAO,gBAChCpB,YAAYO,EAAI,GAAGY,UAAUE,IAAI,8BAGVH,IAAvBlB,YAAYO,EAAI,GAAkB,CAClCP,YAAYO,EAAI,GAAGY,UAAUC,OAAO,gBACpCpB,YAAY,GAAGmB,UAAUE,IAAI,qCAQzCP,OAAOS,QAAQC,IAAI,wBAK3BC,YAAYhC,KAAMF,EAAGU,gBAAiBd,iBAc5CkB,kBAAoB,CAACZ,KAAMG,WAAYT,WAAYuC,QAErDjC,KAAOG,WAAW8B,MACbC,aAAa,gBAAiB,QACnClC,KAAK0B,UAAUE,IAAI,UACnBlC,WAAWwC,aAAa,wBAAyBlC,KAAKe,IACtDf,KAAKE,cAAc,gBAAgBwB,UAAUE,IAAI,gBAC1C5B,MAWLgC,YAAc,CAAChC,KAAMF,EAAGU,gBAAiBd,cACvCM,OACAF,EAAEqC,iBACsB,OAApB3B,kBACAA,gBAAgBkB,UAAUC,OAAO,UACjCnB,gBAAgBN,cAAc,gBAAgBwB,UAAUC,OAAO,iBAEnE3B,KAAK0B,UAAUE,IAAI,UAEnB5B,KAAKE,cAAc,gBAAgBwB,UAAUE,IAAI,gBACjDlC,WAAWwC,aAAa,wBAAyBlC,KAAKe"}