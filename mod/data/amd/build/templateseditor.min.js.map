{"version":3,"file":"templateseditor.min.js","sources":["../src/templateseditor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module to control the template editor.\n *\n * @module      mod_data/templateseditor\n * @copyright   2021 Mihail Geshoski <mihail@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\nimport {relativeUrl} from 'core/url';\nimport {saveCancel} from 'core/notification';\n\nprefetchStrings('admin', ['confirmation']);\nprefetchStrings('mod_data', [\n    'resettemplateconfirmtitle',\n    'resettemplateconfirm',\n    'resettemplate',\n    'enabletemplateeditorcheck',\n    'editorenable'\n]);\n\n/**\n * Template editor constants.\n */\nconst selectors = {\n    toggleTemplateEditor: 'input[name=\"useeditor\"]',\n    resetTemplate: 'input[name=\"defaultform\"]',\n    resetButton: 'input[name=\"resetbutton\"]',\n    editForm: '#edittemplateform',\n};\n\n/**\n * Register event listeners for the module.\n *\n * @param {Number} instanceId The database ID\n * @param {string} mode The template mode\n */\nconst registerEventListeners = (instanceId, mode) => {\n    registerResetButton();\n    registerEditorToggler(instanceId, mode);\n};\n\nconst registerResetButton = () => {\n    const editForm = document.querySelector(selectors.editForm);\n    const resetButton = document.querySelector(selectors.resetButton);\n    const resetTemplate = document.querySelector(selectors.resetTemplate);\n\n    if (!resetButton || !resetTemplate || !editForm) {\n        return;\n    }\n\n    resetButton.addEventListener('click', async(event) => {\n        event.preventDefault();\n        saveCancel(\n            getString('resettemplateconfirmtitle', 'mod_data'),\n            getString('resettemplateconfirm', 'mod_data'),\n            getString('resettemplate', 'mod_data'),\n            () => {\n                resetTemplate.value = \"true\";\n                editForm.submit();\n            },\n            null,\n            {triggerElement: event.target}\n        );\n    });\n};\n\nconst registerEditorToggler = (instanceId, mode) => {\n    const toggleTemplateEditor = document.querySelector(selectors.toggleTemplateEditor);\n\n    if (!toggleTemplateEditor) {\n        return;\n    }\n\n    toggleTemplateEditor.addEventListener('click', async(event) => {\n        event.preventDefault();\n        // Whether the event action attempts to enable or disable the template editor.\n        const enableTemplateEditor = event.target.checked;\n\n        if (enableTemplateEditor) {\n            // Display a confirmation dialog before enabling the template editor.\n            saveCancel(\n                getString('confirmation', 'admin'),\n                getString('enabletemplateeditorcheck', 'mod_data'),\n                getString('editorenable', 'mod_data'),\n                () => {\n                    window.location = relativeUrl('/mod/data/templates.php', {d: instanceId, mode: mode, useeditor: true});\n                },\n                null,\n                {triggerElement: event.target}\n            );\n        } else {\n            window.location = relativeUrl('/mod/data/templates.php', {d: instanceId, mode: mode, useeditor: false});\n        }\n    });\n};\n\n/**\n * Initialize the module.\n *\n * @param {int} instanceId The database ID\n * @param {string} mode The template mode\n */\nexport const init = (instanceId, mode) => {\n    registerEventListeners(instanceId, mode);\n};\n"],"names":["selectors","registerResetButton","editForm","document","querySelector","resetButton","resetTemplate","addEventListener","async","event","preventDefault","value","submit","triggerElement","target","registerEditorToggler","instanceId","mode","toggleTemplateEditor","checked","window","location","d","useeditor","registerEventListeners"],"mappings":";;;;;;;;8BA4BgB,QAAS,CAAC,+CACV,WAAY,CACxB,4BACA,uBACA,gBACA,4BACA,uBAMEA,+BACoB,0BADpBA,wBAEa,4BAFbA,sBAGW,4BAHXA,mBAIQ,oBAcRC,oBAAsB,WAClBC,SAAWC,SAASC,cAAcJ,oBAClCK,YAAcF,SAASC,cAAcJ,uBACrCM,cAAgBH,SAASC,cAAcJ,yBAExCK,aAAgBC,eAAkBJ,UAIvCG,YAAYE,iBAAiB,SAASC,MAAAA,QAClCC,MAAMC,+CAEF,mBAAU,4BAA6B,aACvC,mBAAU,uBAAwB,aAClC,mBAAU,gBAAiB,aAC3B,KACIJ,cAAcK,MAAQ,OACtBT,SAASU,WAEb,KACA,CAACC,eAAgBJ,MAAMK,aAK7BC,sBAAwB,CAACC,WAAYC,cACjCC,qBAAuBf,SAASC,cAAcJ,gCAE/CkB,sBAILA,qBAAqBX,iBAAiB,SAASC,MAAAA,QAC3CC,MAAMC,iBAEuBD,MAAMK,OAAOK,sCAKlC,mBAAU,eAAgB,UAC1B,mBAAU,4BAA6B,aACvC,mBAAU,eAAgB,aAC1B,KACIC,OAAOC,UAAW,oBAAY,0BAA2B,CAACC,EAAGN,WAAYC,KAAMA,KAAMM,WAAW,MAEpG,KACA,CAACV,eAAgBJ,MAAMK,SAG3BM,OAAOC,UAAW,oBAAY,0BAA2B,CAACC,EAAGN,WAAYC,KAAMA,KAAMM,WAAW,sBAWxF,CAACP,WAAYC,QAlEF,EAACD,WAAYC,QACxChB,sBACAc,sBAAsBC,WAAYC,OAiElCO,CAAuBR,WAAYC"}